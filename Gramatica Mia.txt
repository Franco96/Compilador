<Inicial> ::= <Clase> <ListaClases> eof //eliminacion de recursion y factorizacion

<ListaClases> ::= <Clases> <ListaClases> | epsilon

<Clase> ::= class idClase <Herencia> { <ListaMiembros> }

<Herencia> ::= extends idClase | epsilon

<ListaMiembros> ::= <Miembro> <ListaMiembros> | epsilon

<miembro> ::= <atributo>|<Constructor>|<metodo> 






<atributo> ::= public <tipo> <ListaDeAtribs> ;| private  <tipo> <ListaDeAtrs> ;

<tipo> ::= boolean | char | int |String | idClase

<ListaDeAtribs> ::= idMetVar <ListaDeAtribsAux>

<ListaDeAtribsAux> ::= , <ListaDeAtribs> | epsilon

<Constructor> ::= idClase <ArgsFormales> <bloque>

<ArgsFormales> ::= ( <listaArgsFormalesOVacio>)

<listaArgsFormalesOVacio> ::= <listaArgsFormales> | epsilon




--------------------------HASTA ACA TENGO CHEQUEADO-------------------------------------------

<listaArgsFormales>::= <ArgFormal> <listaArgsFormalesAux> 

<listaArgsFormalesAux> ::= ,<listaArgsFormales> | epsilon 

<ArgFormal>:<Tipo> idMetVar

<bloque> ::= { <listaSentencias>}


<listaSentencias>::= <sentencia> <listaSentencias> | epsilon



<sentencia> ::= ;
<sentencia> ::= <acceso> <asignacionOLlamada>; 
<Sentencia> ::= <Tipo> <ListaDecVars> ;


<Sentencia> ::= if ( <Expresion> ) <Sentencia> <ConOSinElse>

<Sentencia> ::= while ( <Expresion> ) <Sentencia>

<Sentencia> ::= <Bloque>
<Sentencia> ::= return <ExpresionOVacio> ;




<ConOSinElse>::= else <Sentencia> | epsilon


<ListaDecVars> ::= idMetVar <ListaDecVarsAux>

<ListaDecVarsAux> :: = , <ListaDecVars> | epsilon








<asignacionOLlamada>:: = <tipoDeAsignacion><Expresion> | epsilon    //aca abarca asignacion o llamada si es epsilon




<acceso> ::= this <encadenado>| idMetVar <accesoMetOVar> <encadenado> | static idClase . idMetVar (listaExpsOVacio) <encadenado>| new idClase (listaExpsOVacio) <encadenado>| (expresion) <encadenado>


<accesoMetOVar> ::= (listaExpOVacio)| epsilon //aca abarca acceso a metodo o variable si es epsilon



<listaExpsOVacio> :: = <listaExps> | epsilon 


<listaExps> ::= <expresion> <listaExpsAux>
<listaExpsAux> ::= , <listaExps> | epsilon



<Encadenado> ::= . idMetVar <accesoMetOVar> <Encadenado> | epsilon


<Metodo> ::= static <TipoMetodo> idMetVar <ArgsFormales> <Bloque> | dynamic <TipoMetodo> idMetVar <ArgsFormales> <Bloque>
<TipoMetodo> ::= <Tipo> | void





--------------EXPRESION---------------------------------------------------

<ExpresionOVacio> ::= <Expresion> | epsilon


<Expresion> :: = <ExpresionUnaria>  <expresionAux>

<expresionAux> :: = <operadorBinario> <ExpresionUnaria> <expresionAux> | epsilon

	

<ExpresionUnaria> ::= + <Operando> | - <Operando> | ! <Operando> | <Operando>

<Operando> ::= null | true | false | litEntero | charlit | stringlit | <acceso>










